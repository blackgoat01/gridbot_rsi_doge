import os
import time
import requests
import hmac
import hashlib
import json
from datetime import datetime

# === KONFIGURATION ===
SYMBOL = "DOGEUSDT"
USDT_EINSATZ = 10
RSI_KAUF = 30
RSI_VERKAUF = 70
RSI_INTERVAL = "15"
CHECK_INTERVAL = 15 * 60  # 15 Minuten

BASE_URL = "https://api.bybit.com"

# === ENV Variablen ===
API_KEY = os.getenv("API_KEY")
API_SECRET = os.getenv("API_SECRET")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# === Signatur f√ºr Bybit Unified V5 ===
def create_signature(payload):
    return hmac.new(API_SECRET.encode(), payload.encode(), hashlib.sha256).hexdigest()

# === Telegram Nachricht senden ===
def send_telegram(text):
    try:
        requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
            data={"chat_id": TELEGRAM_CHAT_ID, "text": text},
        )
    except Exception as e:
        print("Telegram Fehler:", e)

# === RSI Berechnen ===
def get_rsi():
    try:
        url = f"{BASE_URL}/v5/market/kline"
        params = {
            "category": "spot",
            "symbol": SYMBOL,
            "interval": RSI_INTERVAL,
            "limit": 100
        }
        r = requests.get(url, params=params)
        closes = [float(x[4]) for x in r.json()["result"]["list"]]
        deltas = [closes[i+1] - closes[i] for i in range(len(closes)-1)]
        gains = [d for d in deltas if d > 0]
        losses = [-d for d in deltas if d < 0]
        avg_gain = sum(gains)/14 if gains else 0.01
        avg_loss = sum(losses)/14 if losses else 0.01
        rs = avg_gain / avg_loss
        rsi = round(100 - (100 / (1 + rs)), 2)
        return rsi
    except Exception as e:
        send_telegram(f"‚ö†Ô∏è RSI Fehler: {str(e)}")
        return None

# === Order platzieren ===
def place_order(side, qty, price):
    timestamp = str(int(time.time() * 1000))
    body = {
        "category": "spot",
        "symbol": SYMBOL,
        "side": side,
        "orderType": "Limit",
        "qty": str(qty),
        "price": str(price),
        "timeInForce": "GTC"
    }
    payload = timestamp + API_KEY + "5000" + json.dumps(body)
    sign = create_signature(payload)
    headers = {
        "X-BAPI-API-KEY": API_KEY,
        "X-BAPI-TIMESTAMP": timestamp,
        "X-BAPI-SIGN": sign,
        "Content-Type": "application/json"
    }
    url = f"{BASE_URL}/v5/order/create"
    r = requests.post(url, headers=headers, data=json.dumps(body))
    send_telegram(f"üì® {side}-Order gesendet ‚ûú {qty} @ {price} USDT\nAntwort: {r.text}")

# === Preis & Wallet ===
def get_price():
    r = requests.get(f"{BASE_URL}/v5/market/tickers", params={"category": "spot", "symbol": SYMBOL})
    return float(r.json()["result"]["list"][0]["lastPrice"])

def get_balance():
    ts = str(int(time.time() * 1000))
    query = f"accountType=UNIFIED&coin=DOGE&timestamp={ts}"
    sign = create_signature(query)
    headers = {
        "X-BAPI-API-KEY": API_KEY,
        "X-BAPI-TIMESTAMP": ts,
        "X-BAPI-SIGN": sign
    }
    url = f"{BASE_URL}/v5/account/wallet-balance?{query}"
    r = requests.get(url, headers=headers)
    try:
        doge = float(r.json()["result"]["list"][0]["coin"][0]["availableBalance"])
        return doge
    except:
        return 0.0

# === MAIN LOOP ===
def run():
    send_telegram("ü§ñ RSI-Trading-Bot gestartet f√ºr DOGEUSDT")
    while True:
        try:
            rsi = get_rsi()
            price = get_price()
            if not rsi or not price:
                time.sleep(CHECK_INTERVAL)
                continue

            send_telegram(f"üìä RSI: {rsi} | Preis: {price} USDT")

            if rsi < RSI_KAUF:
                qty = round(USDT_EINSATZ / price, 2)
                place_order("Buy", qty, round(price, 4))

            elif rsi > RSI_VERKAUF:
                doge = get_balance()
                if doge >= 5:
                    place_order("Sell", round(doge, 2), round(price, 4))
                else:
                    send_telegram("‚ö†Ô∏è Nicht genug DOGE f√ºr Verkauf.")
        except Exception as e:
            send_telegram(f"‚ùå Laufzeitfehler: {str(e)}")

        time.sleep(CHECK_INTERVAL)

if __name__ == "__main__":
    run()
